// source: listing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.listing.CreateListingDto', null, global);
goog.exportSymbol('proto.listing.Empty', null, global);
goog.exportSymbol('proto.listing.FindOneListingDto', null, global);
goog.exportSymbol('proto.listing.Listings', null, global);
goog.exportSymbol('proto.listing.ProtoListing', null, global);
goog.exportSymbol('proto.listing.UpdateListingDto', null, global);
goog.exportSymbol('proto.listing.UserDto', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listing.UpdateListingDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listing.UpdateListingDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listing.UpdateListingDto.displayName = 'proto.listing.UpdateListingDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listing.FindOneListingDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listing.FindOneListingDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listing.FindOneListingDto.displayName = 'proto.listing.FindOneListingDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listing.UserDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listing.UserDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listing.UserDto.displayName = 'proto.listing.UserDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listing.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listing.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listing.Empty.displayName = 'proto.listing.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listing.Listings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listing.Listings.repeatedFields_, null);
};
goog.inherits(proto.listing.Listings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listing.Listings.displayName = 'proto.listing.Listings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listing.CreateListingDto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listing.CreateListingDto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listing.CreateListingDto.displayName = 'proto.listing.CreateListingDto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listing.ProtoListing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listing.ProtoListing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listing.ProtoListing.displayName = 'proto.listing.ProtoListing';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listing.UpdateListingDto.prototype.toObject = function(opt_includeInstance) {
  return proto.listing.UpdateListingDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listing.UpdateListingDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.UpdateListingDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    listingid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    datetime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expirydate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    category: jspb.Message.getFieldWithDefault(msg, 5, ""),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    description: jspb.Message.getFieldWithDefault(msg, 7, ""),
    image: jspb.Message.getFieldWithDefault(msg, 8, ""),
    pickupaddressfirst: jspb.Message.getFieldWithDefault(msg, 9, ""),
    pickupaddresssecond: jspb.Message.getFieldWithDefault(msg, 10, ""),
    pickupaddressthird: jspb.Message.getFieldWithDefault(msg, 11, ""),
    pickuppostalcode: jspb.Message.getFieldWithDefault(msg, 12, ""),
    pickupstartdate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    pickupenddate: jspb.Message.getFieldWithDefault(msg, 14, ""),
    pickupstarttime: jspb.Message.getFieldWithDefault(msg, 15, ""),
    pickupendtime: jspb.Message.getFieldWithDefault(msg, 16, ""),
    contactphone: jspb.Message.getFieldWithDefault(msg, 17, ""),
    contactemail: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listing.UpdateListingDto}
 */
proto.listing.UpdateListingDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listing.UpdateListingDto;
  return proto.listing.UpdateListingDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listing.UpdateListingDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listing.UpdateListingDto}
 */
proto.listing.UpdateListingDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setListingid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatetime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpirydate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddressfirst(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddresssecond(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddressthird(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickuppostalcode(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupstartdate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupenddate(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupstarttime(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupendtime(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactphone(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactemail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listing.UpdateListingDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listing.UpdateListingDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listing.UpdateListingDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.UpdateListingDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListingid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional int32 ListingID = 1;
 * @return {number}
 */
proto.listing.UpdateListingDto.prototype.getListingid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setListingid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Datetime = 3;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setDatetime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearDatetime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasDatetime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string ExpiryDate = 4;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getExpirydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setExpirydate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearExpirydate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasExpirydate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string Category = 5;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setCategory = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearCategory = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasCategory = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 Status = 6;
 * @return {number}
 */
proto.listing.UpdateListingDto.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string Description = 7;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string Image = 8;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setImage = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearImage = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasImage = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string PickUpAddressFirst = 9;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getPickupaddressfirst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setPickupaddressfirst = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearPickupaddressfirst = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasPickupaddressfirst = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string PickUpAddressSecond = 10;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getPickupaddresssecond = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setPickupaddresssecond = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearPickupaddresssecond = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasPickupaddresssecond = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string PickUpAddressThird = 11;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getPickupaddressthird = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setPickupaddressthird = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearPickupaddressthird = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasPickupaddressthird = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string PickUpPostalCode = 12;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getPickuppostalcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setPickuppostalcode = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearPickuppostalcode = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasPickuppostalcode = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string PickUpStartDate = 13;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getPickupstartdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setPickupstartdate = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearPickupstartdate = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasPickupstartdate = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string PickUpEndDate = 14;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getPickupenddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setPickupenddate = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearPickupenddate = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasPickupenddate = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string PickUpStartTime = 15;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getPickupstarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setPickupstarttime = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearPickupstarttime = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasPickupstarttime = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string PickUpEndTime = 16;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getPickupendtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setPickupendtime = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearPickupendtime = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasPickupendtime = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string ContactPhone = 17;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getContactphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setContactphone = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearContactphone = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasContactphone = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string ContactEmail = 18;
 * @return {string}
 */
proto.listing.UpdateListingDto.prototype.getContactemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.setContactemail = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.listing.UpdateListingDto} returns this
 */
proto.listing.UpdateListingDto.prototype.clearContactemail = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listing.UpdateListingDto.prototype.hasContactemail = function() {
  return jspb.Message.getField(this, 18) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listing.FindOneListingDto.prototype.toObject = function(opt_includeInstance) {
  return proto.listing.FindOneListingDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listing.FindOneListingDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.FindOneListingDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    listingid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listing.FindOneListingDto}
 */
proto.listing.FindOneListingDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listing.FindOneListingDto;
  return proto.listing.FindOneListingDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listing.FindOneListingDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listing.FindOneListingDto}
 */
proto.listing.FindOneListingDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setListingid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listing.FindOneListingDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listing.FindOneListingDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listing.FindOneListingDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.FindOneListingDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListingid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ListingID = 1;
 * @return {number}
 */
proto.listing.FindOneListingDto.prototype.getListingid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listing.FindOneListingDto} returns this
 */
proto.listing.FindOneListingDto.prototype.setListingid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listing.UserDto.prototype.toObject = function(opt_includeInstance) {
  return proto.listing.UserDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listing.UserDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.UserDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listing.UserDto}
 */
proto.listing.UserDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listing.UserDto;
  return proto.listing.UserDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listing.UserDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listing.UserDto}
 */
proto.listing.UserDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listing.UserDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listing.UserDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listing.UserDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.UserDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 UserID = 1;
 * @return {number}
 */
proto.listing.UserDto.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listing.UserDto} returns this
 */
proto.listing.UserDto.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listing.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.listing.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listing.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listing.Empty}
 */
proto.listing.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listing.Empty;
  return proto.listing.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listing.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listing.Empty}
 */
proto.listing.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listing.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listing.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listing.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listing.Listings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listing.Listings.prototype.toObject = function(opt_includeInstance) {
  return proto.listing.Listings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listing.Listings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.Listings.toObject = function(includeInstance, msg) {
  var f, obj = {
    listingsList: jspb.Message.toObjectList(msg.getListingsList(),
    proto.listing.ProtoListing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listing.Listings}
 */
proto.listing.Listings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listing.Listings;
  return proto.listing.Listings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listing.Listings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listing.Listings}
 */
proto.listing.Listings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listing.ProtoListing;
      reader.readMessage(value,proto.listing.ProtoListing.deserializeBinaryFromReader);
      msg.addListings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listing.Listings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listing.Listings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listing.Listings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.Listings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.listing.ProtoListing.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProtoListing listings = 1;
 * @return {!Array<!proto.listing.ProtoListing>}
 */
proto.listing.Listings.prototype.getListingsList = function() {
  return /** @type{!Array<!proto.listing.ProtoListing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listing.ProtoListing, 1));
};


/**
 * @param {!Array<!proto.listing.ProtoListing>} value
 * @return {!proto.listing.Listings} returns this
*/
proto.listing.Listings.prototype.setListingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.listing.ProtoListing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listing.ProtoListing}
 */
proto.listing.Listings.prototype.addListings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.listing.ProtoListing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.listing.Listings} returns this
 */
proto.listing.Listings.prototype.clearListingsList = function() {
  return this.setListingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listing.CreateListingDto.prototype.toObject = function(opt_includeInstance) {
  return proto.listing.CreateListingDto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listing.CreateListingDto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.CreateListingDto.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    datetime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expirydate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    category: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    image: jspb.Message.getFieldWithDefault(msg, 7, ""),
    pickupaddressfirst: jspb.Message.getFieldWithDefault(msg, 8, ""),
    pickupaddresssecond: jspb.Message.getFieldWithDefault(msg, 9, ""),
    pickupaddressthird: jspb.Message.getFieldWithDefault(msg, 10, ""),
    pickuppostalcode: jspb.Message.getFieldWithDefault(msg, 11, ""),
    pickupstartdate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    pickupenddate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    pickupstarttime: jspb.Message.getFieldWithDefault(msg, 14, ""),
    pickupendtime: jspb.Message.getFieldWithDefault(msg, 15, ""),
    contactphone: jspb.Message.getFieldWithDefault(msg, 16, ""),
    contactemail: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listing.CreateListingDto}
 */
proto.listing.CreateListingDto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listing.CreateListingDto;
  return proto.listing.CreateListingDto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listing.CreateListingDto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listing.CreateListingDto}
 */
proto.listing.CreateListingDto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatetime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpirydate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddressfirst(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddresssecond(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddressthird(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickuppostalcode(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupstartdate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupenddate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupstarttime(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupendtime(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactphone(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactemail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listing.CreateListingDto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listing.CreateListingDto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listing.CreateListingDto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.CreateListingDto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDatetime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpirydate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPickupaddressfirst();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPickupaddresssecond();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPickupaddressthird();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPickuppostalcode();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPickupstartdate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPickupenddate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPickupstarttime();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getPickupendtime();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getContactphone();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getContactemail();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional int32 UserID = 1;
 * @return {number}
 */
proto.listing.CreateListingDto.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Datetime = 3;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setDatetime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ExpiryDate = 4;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getExpirydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setExpirydate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Category = 5;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Description = 6;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string Image = 7;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string PickUpAddressFirst = 8;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getPickupaddressfirst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setPickupaddressfirst = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string PickUpAddressSecond = 9;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getPickupaddresssecond = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setPickupaddresssecond = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string PickUpAddressThird = 10;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getPickupaddressthird = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setPickupaddressthird = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string PickUpPostalCode = 11;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getPickuppostalcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setPickuppostalcode = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string PickUpStartDate = 12;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getPickupstartdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setPickupstartdate = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string PickUpEndDate = 13;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getPickupenddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setPickupenddate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string PickUpStartTime = 14;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getPickupstarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setPickupstarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string PickUpEndTime = 15;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getPickupendtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setPickupendtime = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string ContactPhone = 16;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getContactphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setContactphone = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string ContactEmail = 17;
 * @return {string}
 */
proto.listing.CreateListingDto.prototype.getContactemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.CreateListingDto} returns this
 */
proto.listing.CreateListingDto.prototype.setContactemail = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listing.ProtoListing.prototype.toObject = function(opt_includeInstance) {
  return proto.listing.ProtoListing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listing.ProtoListing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.ProtoListing.toObject = function(includeInstance, msg) {
  var f, obj = {
    listingid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    datetime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    expirydate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    category: jspb.Message.getFieldWithDefault(msg, 6, ""),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    description: jspb.Message.getFieldWithDefault(msg, 8, ""),
    image: jspb.Message.getFieldWithDefault(msg, 9, ""),
    pickupaddressfirst: jspb.Message.getFieldWithDefault(msg, 10, ""),
    pickupaddresssecond: jspb.Message.getFieldWithDefault(msg, 11, ""),
    pickupaddressthird: jspb.Message.getFieldWithDefault(msg, 12, ""),
    pickuppostalcode: jspb.Message.getFieldWithDefault(msg, 13, ""),
    pickupstartdate: jspb.Message.getFieldWithDefault(msg, 14, ""),
    pickupenddate: jspb.Message.getFieldWithDefault(msg, 15, ""),
    pickupstarttime: jspb.Message.getFieldWithDefault(msg, 16, ""),
    pickupendtime: jspb.Message.getFieldWithDefault(msg, 17, ""),
    contactphone: jspb.Message.getFieldWithDefault(msg, 18, ""),
    contactemail: jspb.Message.getFieldWithDefault(msg, 19, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listing.ProtoListing}
 */
proto.listing.ProtoListing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listing.ProtoListing;
  return proto.listing.ProtoListing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listing.ProtoListing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listing.ProtoListing}
 */
proto.listing.ProtoListing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setListingid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatetime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpirydate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddressfirst(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddresssecond(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupaddressthird(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickuppostalcode(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupstartdate(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupenddate(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupstarttime(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickupendtime(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactphone(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactemail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listing.ProtoListing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listing.ProtoListing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listing.ProtoListing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listing.ProtoListing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListingid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatetime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExpirydate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPickupaddressfirst();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPickupaddresssecond();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPickupaddressthird();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPickuppostalcode();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPickupstartdate();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getPickupenddate();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getPickupstarttime();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getPickupendtime();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getContactphone();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getContactemail();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
};


/**
 * optional int32 ListingID = 1;
 * @return {number}
 */
proto.listing.ProtoListing.prototype.getListingid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setListingid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 UserID = 2;
 * @return {number}
 */
proto.listing.ProtoListing.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string Name = 3;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Datetime = 4;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setDatetime = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ExpiryDate = 5;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getExpirydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setExpirydate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Category = 6;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 Status = 7;
 * @return {number}
 */
proto.listing.ProtoListing.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string Description = 8;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Image = 9;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string PickUpAddressFirst = 10;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getPickupaddressfirst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setPickupaddressfirst = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string PickUpAddressSecond = 11;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getPickupaddresssecond = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setPickupaddresssecond = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string PickUpAddressThird = 12;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getPickupaddressthird = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setPickupaddressthird = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string PickUpPostalCode = 13;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getPickuppostalcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setPickuppostalcode = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string PickUpStartDate = 14;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getPickupstartdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setPickupstartdate = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string PickUpEndDate = 15;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getPickupenddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setPickupenddate = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string PickUpStartTime = 16;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getPickupstarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setPickupstarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string PickUpEndTime = 17;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getPickupendtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setPickupendtime = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string ContactPhone = 18;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getContactphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setContactphone = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string ContactEmail = 19;
 * @return {string}
 */
proto.listing.ProtoListing.prototype.getContactemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.listing.ProtoListing} returns this
 */
proto.listing.ProtoListing.prototype.setContactemail = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


goog.object.extend(exports, proto.listing);
